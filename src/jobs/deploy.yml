description: "Basic deploy job"
parameters:
  # Required
  service:
    type: string
  stage:
    type: string

  # Optional
  path:
    type: string
    default: "."
  fleece-run-to-env:
    type: boolean
    default: false
  use-sops:
    type: boolean
    default: true
  config:
    type: string
    default: "../../environments.yml"
    description: >
      -c option for fleece run
  update-gatekeeper-policy:
    type: boolean
    default: false
  terraform-version:
    type: string
    default: "0.12.26"
  plan-only:
    type: boolean
    default: false

  aws-access-key-id-env-var:
    default: AWS_ACCESS_KEY_ID
    type: env_var_name
  aws-secret-access-key-env-var:
    default: AWS_SECRET_ACCESS_KEY
    type: env_var_name
  aws-region:
    default: AWS_REGION
    type: env_var_name
  executor:
    default: python
    description: |
      Override executor with a custom executor, for example, to choose a
      different version tag.
    type: executor
  terraform-bucket-region:
    type: string
    default: us-east-1
  user-deploy:
    type: boolean
    default: false
  attach-workspace:
    default: true
    description: |
      Boolean for whether or not to attach to an existing workspace. Default is
      true.

      If you have too many deploy jobs gated by a manual approval step, you
      might end up with very slow deploy jobs due to CircleCI attaching every
      single pre-existing workspace within the workflow prior to the approval
      step.
    type: boolean
  use-artifacts:
    type: boolean
    default: false
    description: |
      You can instruct the deploy job to use an existing artifact from a
      previous build job instead of creating a new one from scratch using
      Terraform's Lambda module.

      Please note that the CIRCLE_TOKEN environment variable must be set for
      this to work properly.
  build-job-name:
    type: string
    default: build-job-name
    description: |
      This must be set to the name of the job that built the artifact we would
      like to deploy in this job.
executor: << parameters.executor >>
steps:
  - checkout
  - when:
      condition: <<parameters.attach-workspace>>
      steps:
        - attach_workspace:
            at: /home/circleci
  - when:
      condition: <<parameters.use-artifacts>>
      steps:
        - download-artifact:
            path: <<parameters.path>>
            build-job-name: <<parameters.build-job-name>>
  - when:
      condition: <<parameters.fleece-run-to-env>>
      steps:
        - fleece-run-to-env:
            stage: <<parameters.stage>>
            path: <<parameters.path>>
            config: <<parameters.config>>
  - aws-cli/setup:
      aws-access-key-id: << parameters.aws-access-key-id-env-var >>
      aws-region: << parameters.aws-region >>
      aws-secret-access-key: << parameters.aws-secret-access-key-env-var >>

  - terraform-install:
      terraform-version: <<parameters.terraform-version>>
  - update-default-path

  - when:
      condition: <<parameters.use-sops>>
      steps:
        - sops-install:
            install-path: /home/circleci/.local/bin/
        - sops-decrypt:
            input: << parameters.path >>/secrets.<< parameters.stage >>.tfvars.json
            output: << parameters.path >>/secrets.auto.tfvars.json

  # Setup Environment Variables
  - export-aws-account-id
  - when:
      condition: <<parameters.user-deploy>>
      steps:
        - export-env-var:
            environment-variable: STAGE
            value: '${CIRCLE_PR_USERNAME:-$CIRCLE_USERNAME}'
  - unless:
      condition: <<parameters.user-deploy>>
      steps:
        - export-env-var:
            environment-variable: STAGE
            value: '<<parameters.stage>>'
  - export-env-var:
      environment-variable: TF_VAR_version
      value: '${CIRCLE_SHA1:-"0.0.0"}'
  - export-env-var:
      environment-variable: TF_VAR_version_tag  # Newer versions of Terraform have reserved "version" for internal use.
      value: '${CIRCLE_SHA1:-"0.0.0"}'
  - export-env-var:
      environment-variable: TERRAFORM_BUCKET
      value: "${AWS_ACCOUNT_ID}-terraform"
  - export-env-var:
      environment-variable: TERRAFORM_BUCKET_REGION
      value: "<<parameters.terraform-bucket-region>>"
  - export-env-var:
      environment-variable: TERRAFORM_KEY
      value: "<<parameters.service>>/${STAGE}/terraform.tfstate"

  # Terraform bits
  - bootstrap-terraform-bucket
  - terraform-init:
      path: << parameters.path >>
      arbitrary-flags: '-backend-config="bucket=${TERRAFORM_BUCKET}" -backend-config="key=${TERRAFORM_KEY}" -backend-config="region=${TERRAFORM_BUCKET_REGION}"'
  - terraform-plan:
      path: << parameters.path >>
      arbitrary-flags: '-var "stage=${STAGE}"'
  - when:
      condition:
        not: <<parameters.plan-only>>
      steps:
        - terraform-apply:
            path: << parameters.path >>

  # Update gatekeeper policy
  - when:
      condition: <<parameters.update-gatekeeper-policy>>
      steps:
        - get-api-id:
            stage: "${STAGE}"
            path: <<parameters.path>>
        - get-rax-token
        - update-gatekeeper-policy:
            stage: <<parameters.stage>>
            path: <<parameters.path>>/gateway
